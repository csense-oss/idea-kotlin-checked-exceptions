package csense.idea.kotlin.checked.exceptions;

import com.intellij.codeInspection.ProblemHighlightType;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import csense.idea.kotlin.checked.exceptions.settings.Settings;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.text.ParseException;

public class SettingsPaneUi {
    @NotNull
    public JComboBox<ProblemHighlightType> checkedExceptionsSeverity;
    @NotNull
    public JCheckBox highlightGutterCheckBox;
    @NotNull
    public JPanel root;
    @NotNull
    public JSpinner maxDepthSpinner;


    public SettingsPaneUi() {

        final ProblemHighlightType[] types = ProblemHighlightType.values();

        for (ProblemHighlightType type : types) {
            checkedExceptionsSeverity.addItem(type);
        }
        checkedExceptionsSeverity.setSelectedItem(Settings.INSTANCE.getCheckedExceptionSeverity());
        highlightGutterCheckBox.setSelected(Settings.INSTANCE.getShouldHighlightCheckedExceptions());
        checkedExceptionsSeverity.setAction(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                didChange = true;
            }
        });
        highlightGutterCheckBox.setAction(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                didChange = true;
            }
        });
        maxDepthSpinner.addChangeListener(e -> didChange = true);
        maxDepthSpinner.setModel(new SpinnerNumberModel(Settings.INSTANCE.getMaxDepth(), 1, 100, 1));
    }


    public boolean didChange = false;

    public void store() {
        try {
            maxDepthSpinner.commitEdit();
        } catch (java.text.ParseException e) {
            //... so bad.
        }
        int maxDepthValue = (Integer) maxDepthSpinner.getValue();
        Settings.INSTANCE.setCheckedExceptionSeverity((ProblemHighlightType) checkedExceptionsSeverity.getSelectedItem());
        Settings.INSTANCE.setShouldHighlightCheckedExceptions(highlightGutterCheckBox.isSelected());
        Settings.INSTANCE.setMaxDepth(maxDepthValue);
        didChange = false;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Checked exceptions severity");
        root.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        checkedExceptionsSeverity = new JComboBox();
        root.add(checkedExceptionsSeverity, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Highlight\n(via gutter) the checked exceptions locations ?");
        root.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        highlightGutterCheckBox = new JCheckBox();
        highlightGutterCheckBox.setText("");
        root.add(highlightGutterCheckBox, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

}
